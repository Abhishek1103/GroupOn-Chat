/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupon;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author aks
 */
public class UploadPic extends javax.swing.JFrame {
        Socket sock ;
        String username;
        String opPath="";
    /**
     * Creates new form UploadPic
     */
    public UploadPic(Socket sock, String username) {
        initComponents();
        System.out.println("In UploadPic");
        this.sock=sock;
        this.username=username;
        txtStatus.setText("Available");
        btnUpload.setEnabled(false);
    }

    private UploadPic() {
       
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSkip = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        imagePathLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFilePath = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(610, 377));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                statusUpdatingWhenWindowClosed(evt);
            }
        });

        btnSkip.setText("Skip");
        btnSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkipActionPerformed(evt);
            }
        });

        btnUpload.setMnemonic('U');
        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnBrowse.setMnemonic('B');
        btnBrowse.setText("Browse");
        btnBrowse.setToolTipText(".jpeg, .png , .jpg, .gif supported");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        imagePathLabel.setText("Image Path :");

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtStatus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStatusFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStatusFocusLost(evt);
            }
        });

        jLabel1.setText("Status :");

        txtFilePath.setColumns(10);
        txtFilePath.setLineWrap(true);
        txtFilePath.setRows(1);
        txtFilePath.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtFilePath);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imagePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtStatus)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnSkip, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBrowse)
                        .addComponent(imagePathLabel)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSkip)
                            .addComponent(btnUpload)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser fChooser = new JFileChooser();
        
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Images", "jpg", "png", "gif", "jpeg");
        fChooser.setFileFilter(fileFilter);         // The file fChooser displays only the above extensions

        fChooser.showOpenDialog(null);
        
        File f=fChooser.getSelectedFile();      // Returns the selected file
        
        if(f!=null){
        String fileName=f.getName();
        
        String filePath=f.getAbsolutePath();    // Returns the absolutePath of the file
        txtFilePath.setText(filePath);
        
        String extension=getFileExtension(fileName);
        
        if(!isImage(extension))
        {
            JOptionPane.showMessageDialog(null,"Select an Image");
            txtFilePath.setText("");
        }
        else
        {
            opPath=System.getProperty("user.home")+"/GroupOn/"+username+"/"+username+".png";
            try
            {
                File fl=new File(opPath);
                fl.delete();
            }
            catch(Exception e)
            {
                System.out.println("No previous image found");
            }
           try
           {
            reScale(filePath, opPath);
            imageLabel.setIcon(new ImageIcon(""));                   //  to be tested
            imageLabel.setIcon(new ImageIcon(opPath));
            btnUpload.setEnabled(true);
           }
           catch(Exception e)
           {
               opPath="";
               btnUpload.setEnabled(false);
               JOptionPane.showMessageDialog(null, "Image Rescaling is in Beta mode\nPlease try with another image\nSorry for Inconvenience");
                txtFilePath.setText("");
           }
           
        }
     }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        int flag=2;
        String status=txtStatus.getText().trim();
        System.out.println("Status : "+status);
        if(status.length()>24)
        {
            JOptionPane.showMessageDialog(null, "Status too long\nSetting Default Status");
            status="Available";
        }
        System.out.println("Status : "+status);
        if( status.isEmpty())
        {
            System.out.println("in empty status: "+ status);
            JOptionPane.showMessageDialog(null, "Empty\nSetting Default Status");
            status="Available";
        }
        
        try 
        {
            PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(System.getProperty("user.home")+"/GroupOn/"+username+"/credentialsLog.txt", true)));
            pw.println(status);
            pw.close();
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
        
        String path="";
        path=opPath;
        if(path.equals("") || path.isEmpty())
        {        // if no file is selected
            JOptionPane.showMessageDialog(null, "Select an Image");
        }
        else
        {
            File fimg=new File(opPath);
            if(fimg.exists())
            {
            try 
            {
                Streams.dout.writeInt(flag); // sends flag to server
                Streams.dout.writeUTF(status);
            }
            catch (IOException ex)
            {
                ex.printStackTrace();
            }   
            SendFile sndFile=new SendFile();
            sndFile.sendFile(sock,path, Streams.oos);   
            System.out.println("Is ServerSocket closed: "+sock.isClosed());
            
            System.out.println("Recieve Started");
            Messenger msg=new Messenger(sock,username);
            msg.setVisible(true);
            this.dispose();
        }
            else
            {
                txtFilePath.setText("");
                JOptionPane.showMessageDialog(null, "File Does Not Exists");
            }
        }
        
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkipActionPerformed
            int flag=3;
            String status=txtStatus.getText().trim();
            if(status.isEmpty())
            {
                status="Available";
            }
            
            if(status.length()>24)
            {
                JOptionPane.showMessageDialog(null, "Status too long\nSetting Default Status");
                status="Available";
            }
            
            try 
            {
                PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(System.getProperty("user.home")+"/GroupOn/"+username+"/credentialsLog.txt", true)));
                pw.println(status);
                pw.close();
            }
            catch (IOException ex)
            {
                ex.printStackTrace();
            }
            
           try
           {
                Streams.dout.writeInt(flag);
                Streams.dout.writeUTF(status);
                String path="defaultPP.png";
                
                try
                {
                    File fl=new File(System.getProperty("user.home")+"/GroupOn/"+username+"/"+username+".png");
                    fl.delete();
                }
                catch(Exception e)
                {
                    System.out.println("No previous image found");
                }
                
                copyFiles(path, System.getProperty("user.home")+"/GroupOn/"+username+"/"+username+".png");
                
                System.out.println("Is socket closed in Skip : "+sock.isClosed());
                
               
         
                Messenger msg=new Messenger(sock,username);
                msg.setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
            
    }//GEN-LAST:event_btnSkipActionPerformed

    private void txtStatusFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStatusFocusLost
        String status=txtStatus.getText().trim();
        if(status=="" || status.equals(null) || status.isEmpty())
        {
            txtStatus.setText("Available");
        }
    }//GEN-LAST:event_txtStatusFocusLost

    private void txtStatusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStatusFocusGained
       String status=txtStatus.getText().trim();
       if(status=="Available" || status.equals("Available"))
       {
           txtStatus.setText("");
       }
    }//GEN-LAST:event_txtStatusFocusGained

    private void statusUpdatingWhenWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_statusUpdatingWhenWindowClosed
    
    }//GEN-LAST:event_statusUpdatingWhenWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       setTitle(username+" - Upload Status and Profile Picture");
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadPic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadPic().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSkip;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imagePathLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtFilePath;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
    
    public String getFileExtension(String fileName){
        String extension = "";
        int i = fileName.lastIndexOf('.');
        int p = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));

        if (i > p) 
        {
            extension = fileName.substring(i+1);
        }
        return extension;
    }
    
        public void reScale(String filePath,String outputFile){
    try {

        BufferedImage sourceImage = ImageIO.read(new File(filePath));
        int width = sourceImage.getWidth();
        int height = sourceImage.getHeight();

        if(width>height)
        {
            float extraSize=    height-160;
            float percentHight = (extraSize/height)*100;
            float percentWidth = width - ((width/100)*percentHight);
            BufferedImage img = new BufferedImage((int)percentWidth, 160, BufferedImage.TYPE_INT_RGB);
            Image scaledImage = sourceImage.getScaledInstance((int)percentWidth, 160, Image.SCALE_SMOOTH);
            img.createGraphics().drawImage(scaledImage, 0, 0, null);
            BufferedImage img2 = new BufferedImage(160, 160,BufferedImage.TYPE_INT_RGB);
            img2 = img.getSubimage((int)((percentWidth-100)/2), 0, 160, 160);

            ImageIO.write(img2, "png", new File(outputFile));    
        }
        else
        {
            float extraSize=    width-160;
            float percentWidth = (extraSize/width)*100;
            float  percentHight = height - ((height/100)*percentWidth);
            BufferedImage img = new BufferedImage(160, (int)percentHight, BufferedImage.TYPE_INT_RGB);
            Image scaledImage = sourceImage.getScaledInstance(160,(int)percentHight, Image.SCALE_SMOOTH);
            img.createGraphics().drawImage(scaledImage, 0, 0, null);
            BufferedImage img2 = new BufferedImage(160, 160 ,BufferedImage.TYPE_INT_RGB);
            img2 = img.getSubimage(0, (int)((percentHight-100)/2), 160, 160);

            ImageIO.write(img2, "png", new File(outputFile));
        }

    }
    catch (IOException e)
    {
        e.printStackTrace();
    }

}
    
    private boolean isImage(String extension){      // method to check whether a file is image
        boolean val=false;
        if((extension.equalsIgnoreCase("png") || extension.equalsIgnoreCase("jpeg") || extension.equalsIgnoreCase("gif") || extension.equalsIgnoreCase("jpg") ))
        {
            val=true;
        }
        return val;
    }
    
    
    private void copyFiles(String sourceLocation, String targetLocation){
        try{
            InputStream in = new FileInputStream(sourceLocation);
            OutputStream out = new FileOutputStream(targetLocation);

            // Copy the bits from instream to outstream
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0)
            {
                out.write(buf, 0, len);
            }
            out.flush();
            in.close();
            out.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}
