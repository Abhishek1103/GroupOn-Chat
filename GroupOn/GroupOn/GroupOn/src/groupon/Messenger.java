/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package groupon;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.*;

import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.StyledDocument;


/**
 *
 * @author aks
 */
public class Messenger extends javax.swing.JFrame {
    public final int LOGGEDIN=1;
    public final int LOGGEDOUT=0;
    static boolean isOnline=true;
    static boolean isLogOutSuccessful=false;
    static boolean isRefreshFileTransComp=false;
    static boolean isChatLogReceived=false;
    static boolean isLoginNotificationRec=false;
    static boolean isFriendProfileRec=false;
    static boolean isGrpRefreshFileTransComp=false;
    static boolean isGrpLogOutSuccessful=false;
    static boolean isGrpChatLogRec=false;
    static boolean isGroupMemRec=false;
    static boolean isAdmin=false;
    static boolean isAddFlag=false;
    static String username;
    static ArrayList<String> notifications=new ArrayList<>();
    Socket sock;
    Socket gSock;
    Socket fSock;
    ArrayList<String> display;
    ArrayList<String> displayGroup;
    public static ArrayList<String> dict=new ArrayList<String>();
    final String loginNotification ="$\\hula[]N[]hula\\$";
    
    
    /**
     * Creates new form Messenger
     */
    public Messenger(Socket sock, String username) {
        initComponents();
        System.out.println("Messenger Initialized");
        this.sock=sock;
        this.username=username;
        display=null;
        displayGroup=null;   
    }
    
    private Messenger() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactList = new javax.swing.JList<>();
        tfSearch = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        btnAttachFile = new javax.swing.JButton();
        btnAddUsers = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        btnProfile = new javax.swing.JButton();
        btnUsersPro = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        btnNewGroup = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        displayTxtPane = new javax.swing.JTextPane();
        btnReCon = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList<>();
        tfGrpSearch = new javax.swing.JTextField();
        btnViewMem = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        msgTextArea = new javax.swing.JTextPane();
        themeLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        notificationMenu = new javax.swing.JMenu();
        menuClearNotification = new javax.swing.JMenu();
        memSearch = new javax.swing.JMenu();
        srchchat = new javax.swing.JMenuItem();
        menuLongPost = new javax.swing.JMenu();
        lngPostWindow = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GroupOn");
        setMinimumSize(new java.awt.Dimension(998, 652));
        setResizable(false);
        setSize(new java.awt.Dimension(998, 652));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                messengerWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 72, 995, 6);

        contactList.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        contactList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Friend List-" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        contactList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contactList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(contactList);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(6, 142, 241, 197);

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });
        getContentPane().add(tfSearch);
        tfSearch.setBounds(6, 106, 241, 25);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        getContentPane().add(btnSend);
        btnSend.setBounds(867, 551, 116, 39);

        btnAttachFile.setText("Attach Files");
        btnAttachFile.setToolTipText("Only available when Online");
        btnAttachFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttachFileActionPerformed(evt);
            }
        });
        getContentPane().add(btnAttachFile);
        btnAttachFile.setBounds(868, 104, 115, 32);

        btnAddUsers.setText("Add Users");
        btnAddUsers.setToolTipText("Only available when Online");
        btnAddUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUsersActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddUsers);
        btnAddUsers.setBounds(737, 104, 120, 32);

        jLabel1.setFont(new java.awt.Font("Cantarell", 1, 42)); // NOI18N
        jLabel1.setText("GroupOn");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(12, 12, 240, 43);

        btnLogout.setText("LogOut");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogout);
        btnLogout.setBounds(902, 0, 75, 59);

        btnProfile.setText("<html><body align='center'>My<br>Profile</body></html>");
        btnProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileActionPerformed(evt);
            }
        });
        getContentPane().add(btnProfile);
        btnProfile.setBounds(810, 0, 81, 59);

        btnUsersPro.setText("View Profile");
        btnUsersPro.setToolTipText("Only available when Online");
        btnUsersPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsersProActionPerformed(evt);
            }
        });
        getContentPane().add(btnUsersPro);
        btnUsersPro.setBounds(589, 106, 130, 25);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(264, 539, 719, 6);

        btnNewGroup.setText("<html><body align='center'>New<br>Group</body></html>");
        btnNewGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGroupActionPerformed(evt);
            }
        });
        getContentPane().add(btnNewGroup);
        btnNewGroup.setBounds(710, 0, 87, 59);

        displayTxtPane.setEditable(false);
        displayTxtPane.setBackground(new java.awt.Color(254, 254, 254));
        displayTxtPane.setFocusable(false);
        jScrollPane4.setViewportView(displayTxtPane);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(253, 142, 730, 391);

        btnReCon.setText("Refresh Lists");
        btnReCon.setToolTipText("Works only when online");
        btnReCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReConActionPerformed(evt);
            }
        });
        getContentPane().add(btnReCon);
        btnReCon.setBounds(253, 106, 150, 25);

        groupList.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        groupList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Groups-" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        groupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(groupList);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(6, 385, 241, 205);

        tfGrpSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfGrpSearchKeyReleased(evt);
            }
        });
        getContentPane().add(tfGrpSearch);
        tfGrpSearch.setBounds(6, 345, 241, 25);

        btnViewMem.setText("View Members");
        btnViewMem.setToolTipText("Shows the members in a group");
        btnViewMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMemActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewMem);
        btnViewMem.setBounds(438, 106, 134, 25);

        msgTextArea.setFont(new java.awt.Font("Cantarell", 0, 17)); // NOI18N
        msgTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                msgTextAreaKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(msgTextArea);

        getContentPane().add(jScrollPane5);
        jScrollPane5.setBounds(253, 551, 608, 39);

        themeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/groupon/grpOnTheme.png"))); // NOI18N
        themeLabel.setText("jLabel2");
        getContentPane().add(themeLabel);
        themeLabel.setBounds(0, -10, 1000, 630);

        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setOpaque(false);

        notificationMenu.setText("Notifications");
        notificationMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notificationMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(notificationMenu);

        menuClearNotification.setText("Clear Notifications");
        menuClearNotification.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuClearNotificationMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuClearNotification);

        memSearch.setText("Search Chat");

        srchchat.setText("Search Chat");
        srchchat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srchchatActionPerformed(evt);
            }
        });
        memSearch.add(srchchat);

        jMenuBar1.add(memSearch);

        menuLongPost.setText("Long Post");

        lngPostWindow.setText("Open Long Post Window");
        lngPostWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lngPostWindowActionPerformed(evt);
            }
        });
        menuLongPost.add(lngPostWindow);

        jMenuBar1.add(menuLongPost);

        jMenu1.setText("Help");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
    
    String action=btnLogout.getText();
        
    if(action.equals("LogOut"))
    {
        try
        {   
            Streams.dout.writeUTF("\\#%imp%#\\");           // Sending the logout flag to server
            GroupStreams.dout.writeUTF("\\#%imp%#\\");
    
            while(!isLogOutSuccessful && !isGrpLogOutSuccessful)
            {
                Thread.sleep(1000);
                System.out.println("Waiting for valdation");
                System.out.println("isLogOutSuccessful = "+isLogOutSuccessful);
                System.out.println("isGrpLogOutSuccessful = "+ isGrpLogOutSuccessful);
            }
     
    
    if(isLogOutSuccessful && isGrpLogOutSuccessful){
       UtilityMethods.loginStatusLog(username, 0);
       new FileWriter(System.getProperty("user.home")+"/GroupOn/tempAllUserLog.txt");
       
       Streams.dout.close();
       Streams.dis.close();
       Streams.ois.close();
       Streams.oos.close();
       sock.close();
       
       GroupStreams.dout.close();
       GroupStreams.dis.close();
       GroupStreams.ois.close();
       GroupStreams.oos.close();
       gSock.close();
       
       FileStreams.dout.close();
       FileStreams.dis.close();
       FileStreams.ois.close();
       FileStreams.oos.close();
       fSock.close();
       
       JOptionPane.showMessageDialog(null,"Logged Out Successfully");
       btnLogout.setText("Login");
       isOnline=false;
    }
    else
        {
            JOptionPane.showMessageDialog(null, "LogOut Unsuccessful...");
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
   }
    else if(action.equals("Login"))
    {
        Welcome wel=new Welcome();
        wel.setVisible(true);
        this.dispose();
    }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileActionPerformed
        String name="", status="";
        try
        {
            BufferedReader br = new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/"+username+"/credentialsLog.txt"));
            String usnm=br.readLine();
            name=br.readLine();
            status=br.readLine();
        }
        catch(IOException e)
        {
            System.err.println(""+e);
        }
        ProfilePage pPage=new ProfilePage(username,name,status, username);
        pPage.setVisible(true);
        
    }//GEN-LAST:event_btnProfileActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
            StyledDocument sdoc = displayTxtPane.getStyledDocument();
            String msg=msgTextArea.getText().trim();
            msgTextArea.setText("");
            String friend="";
            String group="";
            
            try{
                
                friend=contactList.getSelectedValue();
                if(friend!=null)
                {
                    if(!(friend.isEmpty()) || !friend.equals(null))
                    {
                        friend=friend.substring(0 , friend.lastIndexOf("-")).trim();
                        if(msg.isEmpty())
                        {
                            JOptionPane.showMessageDialog(null, "Cannot send empty messages...");
                        }
                        else
                        {
                            try
                            {
                                if(!friend.equals("Friend List"))
                                {
                                    System.out.println("Sending single Message");
                                    Streams.dout.writeUTF(msg);
                                    sdoc.insertString(sdoc.getLength(), username+" : "+msg+"\n", null);
                                    BufferedWriter br=new BufferedWriter(new FileWriter(System.getProperty("user.home")+"/GroupOn/"+username+"/"+friend+".txt", true));
                                    br.append(username+" : "+msg+"\n");
                                    br.close();
                                }
                    
                                try
                                {
                                    msgTextArea.requestFocus();
                                }
                                catch(Exception e)
                                {
                                    System.out.println("Error in focusing back ");
                                }
                   
                            }
                            catch(Exception e)
                            {
                                e.printStackTrace();
                            }
                
                        }
                    }
                }
                else
                {
                    System.out.println("Sending group Message");
                    group=groupList.getSelectedValue();
                    if(!((group.isEmpty()) || (group.equals("Groups-"))))
                    {
                        if(msg.isEmpty())
                        {
                            JOptionPane.showMessageDialog(null, "Cannot send empty messages...");
                        }
                        else
                        {
                            try
                            {
                                GroupStreams.dout.writeUTF(group+" : "+msg);
                                sdoc.insertString(sdoc.getLength(), username+" : "+msg+"\n", null);
                                BufferedWriter br=new BufferedWriter(new FileWriter(System.getProperty("user.home")+"/GroupOn/"+username+"/"+group+"ChatLog.txt", true));
                                br.append(username+" : "+msg+"\n");
                                br.close();
                    
                                try
                                {
                                    msgTextArea.requestFocus();
                                }
                                catch(Exception ex)
                                {
                                    System.out.println("Error in focusing back ");
                                }
                   
                            }
                            catch(Exception ee)
                            {
                                ee.printStackTrace();
                            }
                        }
                    }
                }
            }
            catch(Exception e)
            {   
                System.out.println("Error in Sending Message");
                e.printStackTrace();
            }
                    
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnUsersProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsersProActionPerformed
    if(isOnline)
    {
        try
        {
             String frndUsrnm=contactList.getSelectedValue();
             frndUsrnm=frndUsrnm.substring(0 , frndUsrnm.lastIndexOf("-")).trim();
             
             if(!(frndUsrnm.equals("Friend List")))
             {
             
                String flag="\\Pro[$]Pro\\";
             
                Streams.dout.writeUTF(flag);
                System.out.println("Flag sent: \\Pro[$]Pro\\");
                Streams.dout.writeUTF(frndUsrnm);
                System.out.println("FriendUsername sent: "+frndUsrnm);
             
                while(!(isFriendProfileRec))
                {
                    Thread.sleep(500);
                    System.out.println("Waiting For friends profile");
                }
                System.out.println("Friends profile recieved");
                isFriendProfileRec=false;
            }
            else
            {
                ProfilePage pp=new ProfilePage("Binary Warriors", "GroupOn", "Hope you're enjoying...","GroupOn");
                pp.setVisible(true);
                 
            }
        }
        catch(Exception e)
        {
            System.out.println("Error in sending friend pro flag: \\Pro[$]Pro\\");
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnUsersProActionPerformed

    private void btnReConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReConActionPerformed
    if(isOnline)
    {
        System.out.println("calling refresh");
        refresh();
        System.out.println("calling refreshGroup");
        refreshGroup();
        System.out.println("Out of refreshGroup");
    }
    }//GEN-LAST:event_btnReConActionPerformed

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
    String key=tfSearch.getText().trim();
    System.out.println("Key from single Search :"+ key);
    ArrayList<String> strArrList=new ArrayList<String>();
    
    if(!(key==null || key.equals("")  || key.isEmpty()))
    {
        for(Iterator<String> i = display.iterator(); i.hasNext();)
        {
            strArrList.add((String)i.next());
        }
            System.err.println("In search");
            searchList(key,strArrList, "single");
            System.err.println("Out of search");
    }
    else
    {
        btnReCon.doClick();
    }
    }//GEN-LAST:event_tfSearchKeyReleased

    private void messengerWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_messengerWindowClosing
    if(isOnline)
    {
        if(btnLogout.getText().equals("LogOut"))
        {
            try
            { 
                    System.out.println("Exiting without logging out");
                    Streams.dout.writeUTF("\\#%imp%#\\");           // Sending the logout flag to server
                    GroupStreams.dout.writeUTF("\\#%imp%#\\");
    
                    while(!isLogOutSuccessful && !isGrpLogOutSuccessful)
                    {
                        Thread.sleep(1000);
                        System.out.println("Waiting for valdation");
                        System.out.println("isLogOutSuccessful = "+isLogOutSuccessful);
                        System.out.println("isGrpLogOutSuccessful = "+ isGrpLogOutSuccessful);
                    }
        
                if(isLogOutSuccessful){
                    isLogOutSuccessful=false;
                    new FileWriter(System.getProperty("user.home")+"/GroupOn/tempAllUserLog.txt");
                    BufferedWriter br=new BufferedWriter(new FileWriter(System.getProperty("user.home")+"/GroupOn/resumeSession.txt"));
                    br.write(username);
                    br.close();
                    Streams.dout.close();
                    Streams.dis.close();
                    Streams.ois.close();
                    Streams.oos.close();
                    sock.close();
                    
                    GroupStreams.dout.close();
                    GroupStreams.dis.close();
                    GroupStreams.ois.close();
                    GroupStreams.oos.close();
                    gSock.close();
                    
                    FileStreams.dout.close();
                    FileStreams.dis.close();
                    FileStreams.ois.close();
                    FileStreams.oos.close();
                    fSock.close();
                    isOnline=false;
                }
                else
                {
                    UtilityMethods.loginStatusLog(username, -1);
                    new FileWriter(System.getProperty("user.home")+"/GroupOn/tempAllUserLog.txt");
                    Streams.dout.close();
                    Streams.dis.close();
                    Streams.oos.close();
                    Streams.ois.close();
                    sock.close();
                    
                    GroupStreams.dout.close();
                    GroupStreams.dis.close();
                    GroupStreams.ois.close();
                    GroupStreams.oos.close();
                    gSock.close();
                    
                    FileStreams.dout.close();
                    FileStreams.dis.close();
                    FileStreams.ois.close();
                    FileStreams.oos.close();
                    fSock.close();
                     isOnline=false;
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }   
    }//GEN-LAST:event_messengerWindowClosing
        
    private void btnAttachFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttachFileActionPerformed
   if(isOnline)
   {    
        JFileChooser attchFileChooser = new JFileChooser();
        attchFileChooser.showOpenDialog(null);
        File f=attchFileChooser.getSelectedFile();
        double fSize=((f.length())/1024)/1024;
        System.out.println(""+f);
        String friendUsername=contactList.getSelectedValue();
        if(fSize<151)
        {
            try
            {
                friendUsername=friendUsername.substring(0,friendUsername.lastIndexOf("-")).trim();
                if(f!=null)
                {
                    try
                    {
                        Streams.dout.writeUTF("\\File[$]File\\");
                        String filePath=f.getAbsolutePath();
                        System.out.println("FilePath "+filePath);
                        FileSendThread fst=new FileSendThread(friendUsername,filePath);
                        fst.start();
                        System.out.println("FileSendThread Started..!!");
                    }
                    catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
        else 
            JOptionPane.showMessageDialog(null, "Cannot transfer files greater than 150 MB..");
    }
    }//GEN-LAST:event_btnAttachFileActionPerformed

    private void contactListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactListMouseClicked

            if(isOnline)
            {
                btnViewMem.setEnabled(false);
                btnAddUsers.setEnabled(false);
                btnUsersPro.setEnabled(true);
                btnAttachFile.setEnabled(true);
            }
            groupList.clearSelection();
            String selectedUser="";
            try
            {
                selectedUser = contactList.getSelectedValue();
            }
            catch(Exception e)
            {
                selectedUser="";
            }
             
            userClicked(selectedUser);
    }//GEN-LAST:event_contactListMouseClicked

    private void notificationMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notificationMenuMouseClicked
         notificationMenu.setText("<html><body>Notifications</body></html>");
    }//GEN-LAST:event_notificationMenuMouseClicked

    private void menuClearNotificationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuClearNotificationMouseClicked
       try
        {
            notificationMenu.removeAll();
            notifications.clear();
        }
        catch(Exception e)
        {
            System.out.println(""+e);
        }
    }//GEN-LAST:event_menuClearNotificationMouseClicked

    private void btnNewGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGroupActionPerformed
        if(isOnline)
        {
            NewGrupWind ngw=new NewGrupWind();
            ngw.setVisible(true);
        }
    }//GEN-LAST:event_btnNewGroupActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        displayTxtPane.setText("GroupOn : Welcome\n");       
        btnSend.setEnabled(false);
        btnAttachFile.setEnabled(false);
        btnAddUsers.setEnabled(false);
        
        if(!isOnline)btnLogout.setText("Login");
        
        btnUsersPro.setEnabled(false);
        btnViewMem.setEnabled(false);
        
        setTitle("GroupOn - "+username);
        DictionaryMaker d=new DictionaryMaker(dict);
        d.start();
        if(isOnline)
        {
            Receive rec = new Receive(sock,username);
            rec.start(); 
            try
            {   
                System.out.println("trying to connect to 6003");
                gSock=new Socket("172.31.78.171", 6003);
                System.out.println("Connected to 5004");
                GroupStreams gs = new GroupStreams(gSock);
                System.out.println("GroupStreams Initialised");
                GroupStreams.dout.writeUTF(username);
                System.out.println("Usernamne sent:"+ username);
            
                System.out.println("Startng grup rec thread");
                GroupReceive gRec = new GroupReceive(sock, username);
                gRec.start();
                System.out.println("grp Rec thrd started");
           
                System.out.println("Trying to connect to file Server");
                fSock=new Socket("172.31.78.171",7003);
                System.out.println("Connected to file Server");
                FileStreams fs=new FileStreams(fSock);
                System.out.println("FileStreams initialised");
                FileStreams.dout.writeUTF(username);
                FileReceive fRec=new FileReceive(fSock, username);
                fRec.start();
                System.out.println("FileReceive thread started");
            
            }
            catch(Exception e)
            {
                System.out.println("Error in Connecting to Group Server");
                e.printStackTrace();
            }
        
           
        
            refresh();
            refreshGroup();
            getLoginNotifications();
        }
        else
        {
            refresh();
            refreshGroup();
        }
    }//GEN-LAST:event_formWindowOpened

    private void tfGrpSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfGrpSearchKeyReleased
        String key=tfGrpSearch.getText().trim();
        System.out.println("Key in groupSearch :"+key);
        
        if(!(key==null || key.equals("")  || key.isEmpty()))
        {
            ArrayList<String> strArrList=new ArrayList<String>();
            for(Iterator<String> i = displayGroup.iterator(); i.hasNext();)
            {
                strArrList.add((String)i.next());
            }
            System.err.println("In search");
            searchList(key,strArrList, "group");
            System.err.println("Out of search");
        }
        else
        {
            btnReCon.doClick();
        }
    }//GEN-LAST:event_tfGrpSearchKeyReleased

    private void groupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupListMouseClicked
            //contactList.setSelectedIndex(-1);
            btnUsersPro.setEnabled(false);
            btnAttachFile.setEnabled(false);
            contactList.clearSelection();
            String selectedGrp="";
            try
            {
                 
                selectedGrp = groupList.getSelectedValue();
                if(selectedGrp.equals("Groups-"))
                     selectedGrp="";
                else
                { 
                    btnViewMem.setEnabled(true);
                    btnAddUsers.setEnabled(true);
                    grpClicked(selectedGrp);
                 }
            }
            catch(Exception e)
            {
                selectedGrp="";
            }
             
    }//GEN-LAST:event_groupListMouseClicked

    private void btnViewMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMemActionPerformed
        String grpName=groupList.getSelectedValue().trim();
        if(grpName!=null)
        {
            if(!((grpName.isEmpty()) || (grpName.equals("Groups-"))))
            {
                try
                {
                    if(isOnline) // only when online
                    {
                        GroupStreams.dout.writeUTF("\\Pro[$]Pro\\"); // writing flag to server
                        GroupStreams.dout.writeUTF(grpName);
                
                        while(!isGroupMemRec)
                        {
                            System.out.println("Waiting for grp mem");
                            Thread.sleep(2000);
                        }
                        isGroupMemRec=false;
                        System.out.println("Group Mem file received");
                    }
                    
                    GrupMem gm=new GrupMem();
                    gm.setVisible(true);
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Select a Group..!!");
            }
        }
    }//GEN-LAST:event_btnViewMemActionPerformed

    private void btnAddUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUsersActionPerformed
    if(isOnline)
    {
        String grpName=groupList.getSelectedValue();
        if(grpName!=null && !(grpName.equals("Groups-"))){
           try
           {
                GroupStreams.dout.writeUTF("\\#Add[@]#\\");
                GroupStreams.dout.writeUTF(grpName);
                System.out.println("Waiting to validate Admin");
                while(!isAddFlag){
                    System.out.println("waiting for isAdmin");
                }
                isAddFlag=false;
                if(isAdmin)
                {
                    // Then allow to add users
                    isAdmin=false;
                    AddUsers au=new AddUsers(grpName);
                    au.setVisible(true);
                }
                else
                {
                    // Then Do not allow
                    JOptionPane.showMessageDialog(null, "You are not ADMIN...");
                }
           }
           catch(Exception e)
           {
               System.out.println("Some error ");
           } 
       }
    }
    }//GEN-LAST:event_btnAddUsersActionPerformed

    private void msgTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_msgTextAreaKeyPressed
              if(evt.getKeyCode()==KeyEvent.VK_SPACE || (evt.getKeyCode()==KeyEvent.VK_ENTER) || evt.getKeyCode()==KeyEvent.VK_TAB){
            try 
            {
                System.out.println("in keyPressed event");

                System.out.println("Everything in white ");
                
                String s=msgTextArea.getText();
                int flag=0;
                System.out.println(s);
                StringTokenizer st=new StringTokenizer(s, " .,?!");
                System.out.println("going to while");
                while(st.hasMoreTokens())
                {
                    String key=st.nextToken();
                    System.out.println("Key = "+ key);
                    System.out.println(""+search(key));
                    if(!search(key))
                    {
                        System.out.println("In if");
                        Document document = msgTextArea.getDocument();
                        try 
                        {                        
                            String find = key;
                            for (int index = 0; index + find.length() <= document.getLength(); index++) 
                            {
                                System.out.println("index= "+index);
                                String match = document.getText(index, find.length());
                                if (find.equals(match)) 
                                {
                                    flag=1;
                                    javax.swing.text.DefaultHighlighter.DefaultHighlightPainter highlightPainter =
                                            new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.RED);
                                    msgTextArea.getHighlighter().addHighlight(index, index + find.length(), highlightPainter);
                                    System.out.println("Wrong word in red");
                                }
                            }
                            System.out.println("out of for");


                        } 
                        catch (Exception ex) 
                        {
                            ex.printStackTrace();
                        }
                    }
                    else
                        System.out.println("not wrong");
                }
                if(flag==0)
                {
                    Highlighter highlight= msgTextArea.getHighlighter();
                    highlight.removeAllHighlights();
                }
                System.out.println("Out of while");
            } 
            catch (Exception ex) 
            {
               ex.printStackTrace();
            }
        }
        
    }//GEN-LAST:event_msgTextAreaKeyPressed

    private void srchchatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srchchatActionPerformed
         FindDialogBox fdb=new FindDialogBox();
        fdb.setVisible(true);
    }//GEN-LAST:event_srchchatActionPerformed

    private void lngPostWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lngPostWindowActionPerformed
        LongPost lp=new LongPost();
        lp.setVisible(true);
    }//GEN-LAST:event_lngPostWindowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Messenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Messenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Messenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Messenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Messenger().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUsers;
    private javax.swing.JButton btnAttachFile;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNewGroup;
    private javax.swing.JButton btnProfile;
    protected static javax.swing.JButton btnReCon;
    protected static javax.swing.JButton btnSend;
    private javax.swing.JButton btnUsersPro;
    private javax.swing.JButton btnViewMem;
    protected static javax.swing.JList<String> contactList;
    protected static javax.swing.JTextPane displayTxtPane;
    protected static javax.swing.JList<String> groupList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem lngPostWindow;
    private javax.swing.JMenu memSearch;
    private javax.swing.JMenu menuClearNotification;
    private javax.swing.JMenu menuLongPost;
    protected static javax.swing.JTextPane msgTextArea;
    protected static javax.swing.JMenu notificationMenu;
    private javax.swing.JMenuItem srchchat;
    private javax.swing.JTextField tfGrpSearch;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JLabel themeLabel;
    // End of variables declaration//GEN-END:variables
    
    void highLighter(int startPos, int endPos){
        try 
        {
            DefaultHighlighter.DefaultHighlightPainter highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
            displayTxtPane.getHighlighter().addHighlight(startPos, endPos,highlightPainter);
        } 
        catch (BadLocationException ex) 
        {
            Logger.getLogger(Messenger.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void refreshCon(String user[]){
        System.out.println("--------------In Refresh ContactList Function------------------------ ");
        contactList.setModel(new javax.swing.AbstractListModel<String>() 
        {
            public int getSize() { return user.length; }
            public String getElementAt(int i) { return user[i]; }
        });
        contactList.setSelectedIndex(0);
    }
    
    void refreshGroupList(String groupUser[]){
        System.out.println("-------------------------In Refresh GroupList Function--------------");
        groupList.setModel(new javax.swing.AbstractListModel<String>() 
        {
            //String[] strings = { "Groups-" };
            public int getSize() { return groupUser.length; }
            public String getElementAt(int i) { return groupUser[i]; }
        });
        groupList.setSelectedIndex(0);
    }
    
    
    void searchList(String key, ArrayList<String> list, String flag){
        System.out.println("-------------Search List Function Called----------------");
        System.err.println("In search function with flag= "+flag);
        
        String arr[]= new String[list.size()];
        if(!(key.isEmpty() || key==""))
        {
            System.out.println("Key not empty");
            for(Iterator<String> i = list.iterator(); i.hasNext();)
            {
                System.out.println("Inside loop");
                String str=(String)i.next();
                if(key.length()<str.length())
                {
                    System.out.println("key length is smaller");
                    if(!(str.substring(0,key.length()).equalsIgnoreCase(key)))
                    { 
                        System.out.println("Removing element"+str);
                        i.remove();
                    }
                }
                else
                {
                    System.out.println("Key length is greater than selected"+str);
                    i.remove();
                }
            }
            System.err.println("List Made");
          
            arr=list.toArray(arr);
            for(int i=0;i<arr.length;i++)
            {
                System.out.print("\t"+arr[i]);
            }
            System.err.println("Calling Recon");
            if(flag.equals("single"))
                    refreshCon(arr);
            else if(flag.equals("group"))
                refreshGroupList(arr);
        }
        else
        {
            if(flag.equals("single"))
                    refreshCon(arr);
            else if(flag.equals("group"))
                refreshGroupList(arr);
        }
        contactList.setSelectedIndex(0);        
    }
    
    
    // to get notifications when logging in
    void getLoginNotifications(){ 
        try{
            
            Streams.dout.writeUTF(loginNotification);
            System.out.println("Flag sent: "+loginNotification);
            
            while(!isLoginNotificationRec)
            {
                System.out.println("Upgating Notifications...");
                try 
                {
                    Thread.sleep(500);
                } 
                catch (InterruptedException ex) 
                {
                    Logger.getLogger(Messenger.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            isLoginNotificationRec=false;
            System.out.println("Added Users to Notifiction Menu");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
    }
    
    
    void refresh(){             // Refreshing Contacts List 
            String selectedComponent="";
            try
            {
                 selectedComponent=contactList.getSelectedValue();
            }
            catch(Exception e )
            {
                
            }
          try 
          {
            
            System.out.println("In Refresh");
            if(isOnline)
                Streams.dout.writeUTF("\\#impR[]\\#imp");
            System.out.println("Flag Sent: "+"\\#impR[]\\#imp");
            
           if(isOnline)
           {
            System.out.println("Waitin for completion of file transfer");
            while(!isRefreshFileTransComp)
            {
                System.out.println(""+(!isRefreshFileTransComp));
                try
                {
                    Thread.sleep(500);
                } 
                catch (InterruptedException ex) 
                {
                    Logger.getLogger(Messenger.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           }
            isRefreshFileTransComp=false;
            System.out.println("Wait over files came");
            
            try
            {
            ArrayList<String> arrUser=new ArrayList<String>();
            ArrayList<String> arrUserOn=new ArrayList<String>();
           
            display=new ArrayList<String>();
            display.add("Friend List-");
                        
            BufferedReader br=new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/allUserLog.txt"));
            String s=""; 
            while((s=br.readLine())!=null)
            {
                arrUser.add(s);
            }
            
            br=new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/tempAllUserLog.txt"));
            while((s=br.readLine())!=null)
            {
                if(!(s.equals("")))
                arrUserOn.add(s);
            }
            arrUser.remove(username);
            arrUserOn.remove(username);
            
            Iterator<String> it1=arrUser.iterator();
            while(it1.hasNext())
            {
                String str1=(String)it1.next();
                 Iterator<String> it2=arrUserOn.iterator();
               while(it2.hasNext())
               {
                   String str2=(String)it2.next();
                   if(str1.equals(str2))
                   {
                       display.add(str1+"\t- Online");
                       it1.remove();
                       it2.remove();
                       break;
                   }
               }
               
            }
            
            Iterator<String> it3=arrUser.iterator();
            while(it3.hasNext())
                display.add((String)it3.next()+"\t- Offline");
            
            
            String arr[]= new String[display.size()];
            arr=display.toArray(arr);
            
            refreshCon(arr);
            
            }catch(Exception e){
                e.printStackTrace();
            }
            
        } 
        catch (IOException ex) 
        {
           ex.printStackTrace();
        }
        if(selectedComponent!="" && selectedComponent!=null)
        {
        try
        {
            contactList.setSelectedValue(selectedComponent, true);
            contactList.setSelectedValue(selectedComponent+" Online", true);
            contactList.setSelectedValue(selectedComponent+" Offline", true);
        }
        catch(Exception e)
        {
            selectedComponent=selectedComponent.substring(0, selectedComponent.lastIndexOf("-")+1);
            try
            {
                contactList.setSelectedValue(selectedComponent+" Online", true);
            }
            catch(Exception ex)
            {
                contactList.setSelectedValue(selectedComponent+" Offline", true);
            }
        }
    }
    }
    
    
    //--------Refresh group---------------
    
    protected void refreshGroup(){
        String selectedGrp="";
        
        try
        {
            selectedGrp=groupList.getSelectedValue();
        }
        catch(Exception e)
        {
        
        }
        
        try{
            if(isOnline)
            {
                GroupStreams.dout.writeUTF("\\#impR[]\\#imp");
            
                System.out.println("Waitin for completion of file transfer(in group)");
                while(!isGrpRefreshFileTransComp)
                {
                    System.out.println(""+(!isGrpRefreshFileTransComp));
                    try 
                    {
                        Thread.sleep(500);
                    } 
                    catch (InterruptedException ex) 
                    {
                        Logger.getLogger(Messenger.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            isGrpRefreshFileTransComp=false;   // change the variable to groupRefreshTransfer
            System.out.println("Wait over files came");
            
            displayGroup=new ArrayList<String>();
            displayGroup.add("Groups-");
            
            String s;
            BufferedReader br=new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/allGroupLog.txt"));
            while((s=br.readLine())!=null)
            {
                if(!(s.equals("") || s.equals("No Groups Created")))
                {
                    displayGroup.add(s);
                }
            }
            
            String arr[]= new String[displayGroup.size()];
            arr=displayGroup.toArray(arr);
            refreshGroupList(arr);
            
            if(selectedGrp!="" && selectedGrp!=null)
                groupList.setSelectedValue(selectedGrp, true);
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    
    
    
    
    // Function to handle when opening a user's chats
    protected static void userClicked(String selectedUser){
         try
            {
                
            isChatLogReceived=false;
            String flag="\\#UsR[]\\#UsR";
            if(!(selectedUser.equals("Friend List-") || selectedUser.isEmpty()))
            {
                btnSend.setEnabled(true);
                displayTxtPane.setText("");
                selectedUser=selectedUser.substring(0, selectedUser.lastIndexOf("-")).trim();
            
            if(isOnline)
            {
                Streams.dout.writeUTF(flag);
                System.out.println("Sent Flag "+ flag);
                Streams.dout.writeUTF(selectedUser);
                System.out.println("Sending Username = "+selectedUser);            

                while(!isChatLogReceived)
                {
                    try
                    {
                        Thread.sleep(2000);
                    }catch(Exception e){
                    
                    }
                    System.out.println("Waiting for chat log transfer");
                }
            }
            isChatLogReceived=false;
            System.out.println("Wait over for Chat logs");
            
            BufferedReader br= new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/"+username+"/"+selectedUser+".txt"));
            String msg="";
            
            StyledDocument sdoc = displayTxtPane.getStyledDocument();
            
            while((msg=br.readLine())!=null) 
            {
                sdoc.insertString(sdoc.getLength(), msg+"\n", null);
                System.out.println(""+msg+"\n");
            }
            }
            else
            {
                displayTxtPane.setText("GroupOn : Welcome\n");
                btnSend.setEnabled(false);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
          
        // Code to handle group chats when a group is created
    protected static void grpClicked(String grpName) {
            String flag="\\#UsR[]\\#UsR";
            if(!(grpName.equals("Groups-")) || !(grpName.isEmpty()))
            {
                btnSend.setEnabled(true);
                displayTxtPane.setText("");
                
               if(isOnline)
               {
                    try
                    {    //Sending flag and groupName
                        GroupStreams.dout.writeUTF(flag);
                        System.out.println("Sent Flag "+ flag);
                        GroupStreams.dout.writeUTF(grpName);
                        System.out.println("Sending GrpName = "+grpName);
                    }    
                    catch(Exception e)
                    {
                        System.out.println("Error in sending flag or grpName");
                        e.printStackTrace();
                    }
               
                    try
                    {       //  Waiting for confirmation
                        while(!isGrpChatLogRec)
                        {
                            Thread.sleep(1000);
                            System.out.println("waiting for chat log transfer");
                        }
                    }
                    catch(Exception e){e.printStackTrace();}
                }
                isGrpChatLogRec=false;
                System.out.println("Wait over...grpChat Logs Came");
                
                try
                {
                    if(GroupReceive.bool || !isOnline)
                    {
                        StyledDocument sdoc=displayTxtPane.getStyledDocument();
                        BufferedReader br= new BufferedReader(new FileReader(System.getProperty("user.home")+"/GroupOn/"+username+"/"+grpName+"ChatLog.txt"));
                        String msg="";
                        while((msg=br.readLine())!=null)
                        {
                            sdoc.insertString(sdoc.getLength(), msg+"\n", null);
                            System.out.println(""+msg+"\n");
                        }   
                    }
                    else
                    {
                        displayTxtPane.setText("GroupOn : Welcome\n\nRequest t add you in the group has been sent");
                        btnSend.setEnabled(false);
                    }
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
                
            }
            else
            {
                displayTxtPane.setText("GroupOn : Welcome\n");
                btnSend.setEnabled(false);
            }
    }
    
    
     boolean search(String key)
    {
       int beg=0,last=69902,mid=0,p=-1;
		while(beg<=last)
		{
			mid=(beg+last)/2;
			if(dict.get(mid).equalsIgnoreCase(key))
			{
				return true;
			
			}
			if(key.compareToIgnoreCase(dict.get(mid))>0)
				beg=mid+1;
			else
				last=mid-1;
		}
                return false;
    }
}
